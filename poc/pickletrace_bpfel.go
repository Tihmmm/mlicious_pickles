// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type PickleTraceFileInfo struct {
	_      structs.HostLayout
	IsPkl  bool
	_      [7]byte
	Offset uint64
}

type PickleTraceOpenState struct {
	_    structs.HostLayout
	Path [256]int8
}

type PickleTracePidFd struct {
	_   structs.HostLayout
	Pid uint32
	Fd  int32
}

type PickleTraceReadArgs struct {
	_     structs.HostLayout
	Fd    int32
	_     [4]byte
	Count uint64
}

// LoadPickleTrace returns the embedded CollectionSpec for PickleTrace.
func LoadPickleTrace() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PickleTraceBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load PickleTrace: %w", err)
	}

	return spec, err
}

// LoadPickleTraceObjects loads PickleTrace and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*PickleTraceObjects
//	*PickleTracePrograms
//	*PickleTraceMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadPickleTraceObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadPickleTrace()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// PickleTraceSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PickleTraceSpecs struct {
	PickleTraceProgramSpecs
	PickleTraceMapSpecs
	PickleTraceVariableSpecs
}

// PickleTraceProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PickleTraceProgramSpecs struct {
	TpEnterClose  *ebpf.ProgramSpec `ebpf:"tp_enter_close"`
	TpEnterOpenat *ebpf.ProgramSpec `ebpf:"tp_enter_openat"`
	TpEnterRead   *ebpf.ProgramSpec `ebpf:"tp_enter_read"`
	TpExitClose2  *ebpf.ProgramSpec `ebpf:"tp_exit_close2"`
	TpExitOpenat  *ebpf.ProgramSpec `ebpf:"tp_exit_openat"`
	TpExitRead    *ebpf.ProgramSpec `ebpf:"tp_exit_read"`
}

// PickleTraceMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PickleTraceMapSpecs struct {
	CloseFd     *ebpf.MapSpec `ebpf:"close_fd"`
	Events      *ebpf.MapSpec `ebpf:"events"`
	OpenTmp     *ebpf.MapSpec `ebpf:"open_tmp"`
	PathMap     *ebpf.MapSpec `ebpf:"path_map"`
	ReadBufPtrs *ebpf.MapSpec `ebpf:"read_buf_ptrs"`
	ReadCtx     *ebpf.MapSpec `ebpf:"read_ctx"`
	TrackedFds  *ebpf.MapSpec `ebpf:"tracked_fds"`
}

// PickleTraceVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PickleTraceVariableSpecs struct {
}

// PickleTraceObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadPickleTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type PickleTraceObjects struct {
	PickleTracePrograms
	PickleTraceMaps
	PickleTraceVariables
}

func (o *PickleTraceObjects) Close() error {
	return _PickleTraceClose(
		&o.PickleTracePrograms,
		&o.PickleTraceMaps,
	)
}

// PickleTraceMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadPickleTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type PickleTraceMaps struct {
	CloseFd     *ebpf.Map `ebpf:"close_fd"`
	Events      *ebpf.Map `ebpf:"events"`
	OpenTmp     *ebpf.Map `ebpf:"open_tmp"`
	PathMap     *ebpf.Map `ebpf:"path_map"`
	ReadBufPtrs *ebpf.Map `ebpf:"read_buf_ptrs"`
	ReadCtx     *ebpf.Map `ebpf:"read_ctx"`
	TrackedFds  *ebpf.Map `ebpf:"tracked_fds"`
}

func (m *PickleTraceMaps) Close() error {
	return _PickleTraceClose(
		m.CloseFd,
		m.Events,
		m.OpenTmp,
		m.PathMap,
		m.ReadBufPtrs,
		m.ReadCtx,
		m.TrackedFds,
	)
}

// PickleTraceVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadPickleTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type PickleTraceVariables struct {
}

// PickleTracePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadPickleTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type PickleTracePrograms struct {
	TpEnterClose  *ebpf.Program `ebpf:"tp_enter_close"`
	TpEnterOpenat *ebpf.Program `ebpf:"tp_enter_openat"`
	TpEnterRead   *ebpf.Program `ebpf:"tp_enter_read"`
	TpExitClose2  *ebpf.Program `ebpf:"tp_exit_close2"`
	TpExitOpenat  *ebpf.Program `ebpf:"tp_exit_openat"`
	TpExitRead    *ebpf.Program `ebpf:"tp_exit_read"`
}

func (p *PickleTracePrograms) Close() error {
	return _PickleTraceClose(
		p.TpEnterClose,
		p.TpEnterOpenat,
		p.TpEnterRead,
		p.TpExitClose2,
		p.TpExitOpenat,
		p.TpExitRead,
	)
}

func _PickleTraceClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pickletrace_bpfel.o
var _PickleTraceBytes []byte
